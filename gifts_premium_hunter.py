import asyncio, os, re, json, logging, time
from pathlib import Path
from typing import Optional

from dotenv import load_dotenv
from telethon import TelegramClient
from playwright.async_api import async_playwright, Page, Frame

load_dotenv()

API_ID = int(os.getenv("TG_API_ID"))
API_HASH = os.getenv("TG_API_HASH")
SESSION = os.getenv("SESSION_NAME", "user_gifts_session")

CHECK_INTERVAL = int(os.getenv("CHECK_INTERVAL", "60"))           # —Å–µ–∫ –º–µ–∂–¥—É —Å–∫–∞–Ω–∞–º–∏
MAX_BUYS_PER_CYCLE = int(os.getenv("MAX_BUYS_PER_CYCLE", "5"))    # –ø–æ–∫—É–ø–æ–∫ –∑–∞ —Ü–∏–∫–ª
PREMIUM_WORDS = [w.strip().lower() for w in os.getenv("PREMIUM_WORDS", "premium,–ø—Ä–µ–º–∏—É–º").split(",")]

STORAGE = "tg_storage_state.json"       # playwright —Å–µ—Å—Å–∏—è web.telegram.org
LOG = logging.getLogger("hunter")
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s: %(message)s")

# --- —Å–µ–ª–µ–∫—Ç–æ—Ä—ã (–ø–æ–¥–æ–≥–Ω–∞–Ω—ã –ø–æ–¥ —Ç–∏–ø–æ–≤—É—é –≤–µ—Ä—Å—Ç–∫—É –º–∏–Ω–∏‚Äë–∞–ø–ø–∞ –ø–æ–¥–∞—Ä–∫–æ–≤).
# –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Å–æ–≤–ø–∞–¥—ë—Ç ‚Äî –ø—Ä–∏—à–ª–∏ —Å–∫—Ä–∏–Ω –∏–∑ web, –ø–æ–ø—Ä–∞–≤–ª—é.
CARD_ITEM = "[data-test-id='gift-card'], .gift-card, [class*='giftCard'], [class*='GiftCard']"
CARD_TITLE = ".title, [data-test-id='gift-title'], [class*='Title']"
CARD_BADGE = ".badge, .label, [data-test-id='gift-badge'], [class*='Badge']"
CARD_FRAME = ".card, .frame, .container, [class*='card']"

BUY_BTN_LIST = "button:has-text('–ö—É–ø–∏—Ç—å'), button:has-text('Buy'), button:has-text('–û—Ç–ø—Ä–∞–≤–∏—Ç—å'), button:has-text('Send')"  # –Ω–∞ –ø–µ—Ä–≤–æ–º —ç–∫—Ä–∞–Ω–µ –≤–Ω—É—Ç—Ä–∏ –∫–∞—Ä—Ç–æ—á–∫–∏
CONFIRM_BUY_BTN = "button:has-text('–û–¢–ü–†–ê–í–ò–¢–¨ –ü–û–î–ê–†–û–ö'), button:has-text('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫'), button:has-text('Send gift')" # –≤—Ç–æ—Ä–æ–π —ç–∫—Ä–∞–Ω
ALL_TAB = "button:has-text('–í—Å–µ –ø–æ–¥–∞—Ä–∫–∏'), button:has-text('All gifts')"

GIFT_ENTRY_URL = "https://t.me/gifts"   # –æ—Ç–∫—Ä—ã–≤–∞–µ–º, –∂–º—ë–º "Open" ‚Üí webview –º–∏–Ω–∏‚Äë–∞–ø–ø–∞

# --- –∞–Ω—Ç–∏–¥—É–±–ª—å –Ω–∞ –¥–∏—Å–∫
BOUGHT_FILE = Path("bought_titles.json")
def load_bought():
    if BOUGHT_FILE.exists():
        try:
            return set(json.loads(BOUGHT_FILE.read_text("utf-8")))
        except Exception:
            return set()
    return set()
def save_bought(s):
    BOUGHT_FILE.write_text(json.dumps(sorted(s), ensure_ascii=False), encoding="utf-8")


def looks_premium(title:str, badge:str)->bool:
    t = (title or "").lower()
    b = (badge or "").lower()
    return any(w in t for w in PREMIUM_WORDS) or any(w in b for w in PREMIUM_WORDS)


async def has_colored_border(card) -> bool:
    """–≠–≤—Ä–∏—Å—Ç–∏–∫–∞: ¬´—Ü–≤–µ—Ç–Ω–∞—è –æ–±–≤–æ–¥–∫–∞¬ª, –æ—Ç–ª–∏—á–Ω–∞—è –æ—Ç –¥–µ—Ñ–æ–ª—Ç–Ω–æ‚Äë—Å–µ—Ä–æ–π.
    –ë–µ—Ä—ë–º —Ü–≤–µ—Ç —Ä–∞–º–∫–∏/—Ç–µ–Ω–µ–π —É –±–ª–∏–∂–∞–π—à–µ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∫–∞—Ä—Ç–æ—á–∫–∏."""
    try:
        elem = card.locator(CARD_FRAME).first
        if await elem.count() == 0:
            elem = card
        color = await elem.evaluate("""(el)=>{
            const s = getComputedStyle(el);
            return (s.borderColor || s.outlineColor || s.boxShadow || '').toString();
        }""")
        # –ø—Ä–∏–º–∏—Ç–∏–≤–Ω–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞: –µ—Å–ª–∏ –≤ —Å—Ç—Ä–æ–∫–µ –µ—Å—Ç—å hex –∏–ª–∏ rgb –Ω–µ —Å–µ—Ä–æ–≥–æ —Ç–æ–Ω–∞
        if not color:
            return False
        color = color.lower()
        # –µ—Å–ª–∏ —Å–æ–≤—Å–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω–æ–µ/none
        if "0, 0, 0, 0" in color or "transparent" in color or color.strip() in ("", "none"):
            return False
        # —Å–µ—Ä—ã–µ —Ç–æ–Ω–∞ —á–∞—Å—Ç–æ –∏–º–µ—é—Ç r=g=b, –ø—Ä–æ–±—É–µ–º –æ—Ç—Å–µ—è—Ç—å
        import re as _re
        m = _re.search(r"rgb\\(\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*\\)", color)
        if m:
            r, g, b = map(int, m.groups())
            return not (abs(r-g)<8 and abs(g-b)<8 and abs(r-b)<8)  # –Ω–µ –ø–æ—á—Ç–∏ —Å–µ—Ä—ã–π
        # –µ—Å–ª–∏ –µ—Å—Ç—å hex –∏ –æ–Ω –Ω–µ #aaa/#ccc
        m = _re.search(r"#([0-9a-f]{6})", color)
        if m:
            hexv = m.group(1)
            r = int(hexv[0:2],16); g=int(hexv[2:4],16); b=int(hexv[4:6],16)
            return not (abs(r-g)<8 and abs(g-b)<8 and abs(r-b)<8)
        # –µ—Å–ª–∏ box-shadow —Å—Ç—Ä–æ–∫–∞ –¥–ª–∏–Ω–Ω–∞—è ‚Äî –≤–µ—Ä–æ—è—Ç–Ω–æ —É–∫—Ä–∞—à–µ–Ω–Ω–∞—è —Ä–∞–º–∫–∞
        return "box-shadow" in color or "inset" in color or "rgba(" in color
    except:
        return False


async def ensure_login(context):
    page = await context.new_page()
    await page.goto("https://web.telegram.org/k/", wait_until="networkidle")
    if "login" in page.url or "auth" in page.url:
        LOG.info("–û—Ç–∫—Ä–æ–π—Å—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ –∏ –∑–∞–ª–æ–≥–∏–Ω—å—Å—è (QR/–∫–æ–¥). –Ø –∂–¥—É‚Ä¶")
        await page.wait_for_url(re.compile(r".*/k/.*"), timeout=0)
        await context.storage_state(path=STORAGE)
        LOG.info("–°–æ—Ö—Ä–∞–Ω–∏–ª —Å–µ—Å—Å–∏—é –≤ %s", STORAGE)
    else:
        LOG.info("–°–µ—Å—Å–∏—è Telegram Web —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞")
    await page.close()


async def open_gifts_webapp(page: Page) -> Frame:
    """–û—Ç–∫—Ä—ã–≤–∞–µ–º t.me/gifts –∏ –∂–º—ë–º Open ‚Üí –ø–æ–ª—É—á–∞–µ–º webview‚Äë—Ñ—Ä–µ–π–º –º–∏–Ω–∏‚Äë–∞–ø–ø–∞."""
    await page.goto(GIFT_ENTRY_URL, wait_until="domcontentloaded")
    # –∫–Ω–æ–ø–∫–∞ Open –º–æ–∂–µ—Ç –±—ã—Ç—å –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–∞
    try:
        await page.get_by_text("Open").click(timeout=4000)
    except:
        try:
            await page.get_by_text("–û—Ç–∫—Ä—ã—Ç—å").click(timeout=4000)
        except:
            pass
    await page.wait_for_timeout(1200)
    # –±–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ—Ä–µ–π–º —Å origin –º–∏–Ω–∏‚Äë–∞–ø–ø–∞
    frames = [f for f in page.frames if f != page.main_frame]
    return frames[-1] if frames else page.main_frame


async def refresh_app(webview: Frame):
    """–ú—è–≥–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –º–∏–Ω–∏‚Äë–∞–ø–ø–∞: –∫–ª–∏–∫–∞–µ–º –≤–∫–ª–∞–¥–∫—É '–í—Å–µ –ø–æ–¥–∞—Ä–∫–∏' –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ñ—Ä–µ–π–º."""
    try:
        if await webview.locator(ALL_TAB).count():
            await webview.locator(ALL_TAB).first.click()
            await webview.wait_for_timeout(400)
    except:
        # –µ—Å–ª–∏ –≤–∫–ª–∞–¥–∫–∏ –Ω–µ—Ç‚Äî–ø—Ä–æ—Å—Ç–æ –ø–æ–¥–æ–∂–¥—ë–º, —Ä–µ—Ñ—Ä–µ—à —Å–¥–µ–ª–∞–µ–º –∏–∑–Ω–∞—Ä—É–∂–∏ –ø–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç–∏–µ–º
        pass


async def scan_and_buy(webview: Frame, bought_titles:set, max_buys:int, client: TelegramClient) -> int:
    """–ò—â–µ–º –ø—Ä–µ–º–∏—É–º –∫–∞—Ä—Ç–æ—á–∫–∏ –∏ –ø–æ–∫—É–ø–∞–µ–º –¥–æ max_buys —à—Ç—É–∫."""
    buys = 0
    cards = await webview.locator(CARD_ITEM).all()
    LOG.info("–ù–∞–π–¥–µ–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫: %d", len(cards))

    for card in cards:
        # –∑–∞–≥–æ–ª–æ–≤–æ–∫/–±—ç–π–¥–∂
        title = ""
        badge = ""
        try:
            if await card.locator(CARD_TITLE).count():
                title = (await card.locator(CARD_TITLE).first.inner_text()).strip()
            if await card.locator(CARD_BADGE).count():
                badge = (await card.locator(CARD_BADGE).first.inner_text()).strip()
        except:
            pass

        premium = looks_premium(title, badge)
        if not premium:
            # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ ¬´—Ü–≤–µ—Ç–Ω—É—é –æ–±–≤–æ–¥–∫—É¬ª
            premium = await has_colored_border(card)

        if not premium:
            continue

        key = title or f"id:{await card.evaluate('(e)=>e.outerHTML.slice(0,80)')}"
        if key in bought_titles:
            continue

        LOG.info("üîé –ü—Ä–µ–º–∏—É–º –∫–∞—Ä—Ç–æ—á–∫–∞: %r / %r", title, badge)

        # –æ—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É
        try:
            await card.click()
        except Exception as e:
            LOG.warning("–ù–µ —Å–º–æ–≥ –∫–ª–∏–∫–Ω—É—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É: %s", e)
            continue

        # –Ω–∞ —ç–∫—Ä–∞–Ω–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∏—â–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–∫—É–ø–∫–∏
        try:
            await webview.locator(BUY_BTN_LIST).first.click(timeout=4000)
        except Exception as e:
            LOG.warning("–ù–µ –Ω–∞—à—ë–ª –∫–Ω–æ–ø–∫—É '–ö—É–ø–∏—Ç—å/–û—Ç–ø—Ä–∞–≤–∏—Ç—å' –Ω–∞ 1-–º —ç–∫—Ä–∞–Ω–µ: %s", e)
            await webview.go_back()
            continue

        # –≤—Ç–æ—Ä–æ–π —ç–∫—Ä–∞–Ω ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        try:
            btn = webview.locator(CONFIRM_BUY_BTN).first
            await btn.wait_for(timeout=5000)
            price_txt = await btn.inner_text()
            await btn.click()
            LOG.info("‚úÖ –ö—É–ø–∏–ª: %s (%s)", key, price_txt)
            bought_titles.add(key)
            save_bought(bought_titles)
            buys += 1

            # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–µ–±–µ –≤ ¬´–ò–∑–±—Ä–∞–Ω–Ω–æ–µ¬ª
            try:
                await client.send_message("me", f"‚úÖ –ö—É–ø–ª–µ–Ω –ø–æ–¥–∞—Ä–æ–∫: {key} {('('+price_txt+')') if price_txt else ''}")
            except Exception as e:
                LOG.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –ò–∑–±—Ä–∞–Ω–Ω–æ–µ: %s", e)

            if buys >= max_buys:
                break
            # –ª—ë–≥–∫–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ–∫—É–ø–∫–∞–º–∏, —á—Ç–æ–±—ã –Ω–µ –≤—ã–≥–ª—è–¥–µ—Ç—å –∫–∞–∫ –±–æ—Ç
            await asyncio.sleep(1.2)

        except Exception as e:
            LOG.warning("–ù–µ —Å–º–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–∫—É–ø–∫—É: %s", e)
            # –ø—ã—Ç–∞–µ–º—Å—è –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ –∏ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å
            try:
                await webview.go_back()
            except:
                pass

    return buys


async def run():
    bought_titles = load_bought()

    # --- Telethon: –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ ¬´–ò–∑–±—Ä–∞–Ω–Ω–æ–µ¬ª
    client = TelegramClient(SESSION, API_ID, API_HASH)
    await client.start()  # —Å–ø—Ä–æ—Å–∏—Ç –∫–æ–¥/2FA –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ

    async with async_playwright() as p:
        browser = await p.chromium.launch(headless=True)
        context = await browser.new_context(storage_state=STORAGE if Path(STORAGE).exists() else None)
        await ensure_login(context)

        page = await context.new_page()

        while True:
            try:
                LOG.info("–û—Ç–∫—Ä—ã–≤–∞—é –º–∏–Ω–∏‚Äë–∞–ø–ø –ø–æ–¥–∞—Ä–∫–æ–≤‚Ä¶")
                webview = await open_gifts_webapp(page)
                await refresh_app(webview)
                bought_now = await scan_and_buy(webview, bought_titles, MAX_BUYS_PER_CYCLE, client)
                LOG.info("–¶–∏–∫–ª –∑–∞–≤–µ—Ä—à—ë–Ω: –∫—É–ø–ª–µ–Ω–æ %d", bought_now)
            except Exception as e:
                LOG.error("–°–±–æ–π —Ü–∏–∫–ª–∞: %s", e)

            # –∑–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å—ë –∏ –∂–¥—ë–º —Å–ª–µ–¥—É—é—â—É—é –º–∏–Ω—É—Ç—É
            try:
                await page.close()
            except:
                pass
            page = await context.new_page()
            await asyncio.sleep(CHECK_INTERVAL)

if __name__ == "__main__":
    asyncio.run(run())
